{"version":3,"sources":["helpers/format-date.ts","helpers/format-type.ts","components/pokemon-card.tsx","models/mock-pokemon.ts","services/pokemon-service.ts","components/pokemon-search.tsx","pages/pokemon-list.tsx","components/loader.tsx","pages/pokemon-detail.tsx","pages/page-not-found.tsx","components/pokemon-form.tsx","pages/pokemon-edit.tsx","models/pokemon.ts","pages/pokemon-add.tsx","services/authentication-service.ts","pages/login.tsx","PrivateRoute.tsx","App.tsx","index.tsx"],"names":["formatDate","date","arguments","length","undefined","Date","concat","getDate","getMonth","getFullYear","formatType","type","color","PokemonCard","_ref","pokemon","borderColor","setColor","useState","history","useHistory","_jsx","className","onClick","goToPokemon","id","push","onMouseEnter","showBorder","onMouseLeave","hideBorder","children","_jsxs","style","src","picture","alt","name","created","types","map","POKEMONS","hp","cp","PokemonService","getPokemons","this","isDev","fetch","then","response","json","catch","error","handleError","Promise","resolve","pokemons","getPokemon","data","isEmpty","find","updatePokemon","method","body","JSON","stringify","headers","index","findIndex","deletePokemon","filter","addPokemon","searchPokemon","term","includes","Object","keys","console","process","PokemonSearch","setTerm","setPokemons","placeholder","value","onChange","e","target","handleInputChange","Link","to","PokemonList","useEffect","position","bottom","right","Loader","PokemonsDetail","match","setPokemon","params","width","margin","PageNotFound","PokemonForm","isEditForm","form","setForm","isValid","hasType","fieldName","fieldValue","newField","_objectSpread","isAddForm","isTypesValid","handleSubmit","preventDefault","validateForm","newForm","start","end","startsWith","endsWith","errorMsg","test","onSubmit","htmlFor","marginBottom","disabled","checked","selectType","currentType","PokemonEdit","Pokemon","constructor","PokemonAdd","getTime","AuthenticationService","login","username","password","isAuthenticated","setTimeout","Login","message","setMessage","PrivateRoute","component","Component","rest","_objectWithoutProperties","_excluded","Route","render","props","Redirect","pathname","App","Router","Switch","exact","path","PokemonDetail","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b330e007.chunk.js","sourcesContent":["const formatDate =(date: Date = new Date()): string => {\r\n    return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n}\r\n\r\nexport default formatDate; "," const formatType = (type: string): string => {\r\n  let color: string;\r\n \r\n  switch (type) {\r\n    case 'Feu': \r\n      color = 'red lighten-1'; \r\n      break; \r\n    case 'Eau': \r\n      color = 'blue lighten-1'; \r\n      break; \r\n    case 'Plante': \r\n      color = 'green lighten-1'; \r\n      break; \r\n    case 'Insecte': \r\n      color = 'brown lighten-1'; \r\n      break; \r\n    case 'Normal': \r\n      color = 'grey lighten-3'; \r\n      break; \r\n    case 'Vol': \r\n      color = 'blue lighten-3'; \r\n      break; \r\n    case 'Poison': \r\n      color = 'deep-purple accent-1'; \r\n      break; \r\n    case 'Fée': \r\n      color = 'pink lighten-4'; \r\n      break; \r\n    case 'Psy': \r\n      color = 'deep-purple darken-2'; \r\n      break; \r\n    case 'Electrik': \r\n      color = 'lime accent-1'; \r\n      break; \r\n    case 'Combat': \r\n      color = 'deep-orange'; \r\n      break; \r\n    default: \r\n      color = 'grey'; \r\n      break; \r\n  }\r\n \r\n  return `chip ${color}`;\r\n}\r\n\r\nexport default formatType;","import React, { FunctionComponent, useState } from 'react'; // 7) importation de l'état\r\nimport Pokemon from '../models/pokemon'; // 1) nous importons l'entitée Pokemon\r\nimport './pokemon-card.css'; //4) importation du fichier css contenant la bordure grise pour tous les pokémons\r\nimport PokemonList from '../pages/pokemon-list';\r\nimport formatDate from '../helpers/format-date'; // 11) importation du fichier pour le format de la date\r\nimport formatType from '../helpers/format-type';// 13) importation du fichier pour le format du type\r\nimport { useHistory } from 'react-router-dom'; // 15) importation du hook useHistory depuis le paquet 'reac-router-dom'\r\n\r\n// 2) on déclare un nouveau type (Props) pour typescript. ce type contient un objet pokemon\r\ntype Props = { \r\n  pokemon: Pokemon,\r\n  borderColor?: string // 5) ajout d'une prop facultative (grâce au point d'interrogation) dans notre composant pokemonCard\r\n};\r\n\r\n// 3) On lie notre type Props à notre propiété d'entrée\r\nconst PokemonCard: FunctionComponent<Props> = ({pokemon, borderColor = '#009688'}) => {  // 5) définition d'une la valeur par défaut (ici couleur verte) de notre prop borderColor (ainsi si la prop est passée par un composant parent cela écrase la valeur par défaut donnée; sinon elle est prise en compte). On utilise ici ECMAScript 6\r\n\r\n// 7) On définit l'état du composant pour stocker la couleur actuelle de la bordure puis dans la 1ère ligne du return on ajoute 2 gestionnaires d'événements showBorder et hideBorder\r\n    const [color, setColor] = useState<string>();\r\n\r\n// 14) On récupère un objet représentant l'historique du navigateur depuis le hook que nous avons importé\r\n    const history = useHistory();\r\n\r\n    const showBorder = () => {\r\n        setColor(borderColor); \r\n    }\r\n\r\n    const hideBorder = () => {\r\n        setColor('#f5f5f5'); // On remet la bordure en gris.\r\n    }\r\n\r\n// 14) suite) On définit une nouvelle méthode de gestionnaire d'événements qui prend en paramètre l'identifiant du pokémon vers lequel on souhaite faire une redirection. Pour cela la méthode push prend en paramètre le chemin vers lequel on souhaite se rendre\r\n    const goToPokemon = (id: number) => {\r\n      history.push(`/pokemons/${id}`);\r\n    }\r\n\r\n    //  11) On supprime la déclaration de formatDate puis on fait une importation à la place comme nous avons créé un fichier forma-date.ts dans helpers\r\n    /*\r\n    // 8) On crée une méthode pour afficher la date de manière plus correcte pour l'utilisateur. Cette méthode prend en paramètre une date et retourne une chaîne de caractère au format jour/mois/année. A noter que dans le return on met le mois à +1 car pour le mois retourné il commence à 0 pour janvier\r\n    const formatDate =  (date: Date): string => {\r\n        return `${date.getDate()}/${date.getMonth()+1}/${date.getFullYear()}`;\r\n    }\r\n    */\r\n\r\n    // 12 On supprime la déclaration de formatType puis on fait une importation à la place comme nous avons créé un fichier forma-type.ts dans helpers\r\n    /*\r\n    // 10) On récupère le code de la fonction prenant en paramètre le type d'un pokémon puis retournant une couleur pour chaque cas de type\r\n    const formatType = (type: string): string => {\r\n  let color: string;\r\n \r\n  switch (type) {\r\n    case 'Feu': \r\n      color = 'red lighten-1'; \r\n      break; \r\n    case 'Eau': \r\n      color = 'blue lighten-1'; \r\n      break; \r\n    case 'Plante': \r\n      color = 'green lighten-1'; \r\n      break; \r\n    case 'Insecte': \r\n      color = 'brown lighten-1'; \r\n      break; \r\n    case 'Normal': \r\n      color = 'grey lighten-3'; \r\n      break; \r\n    case 'Vol': \r\n      color = 'blue lighten-3'; \r\n      break; \r\n    case 'Poison': \r\n      color = 'deep-purple accent-1'; \r\n      break; \r\n    case 'Fée': \r\n      color = 'pink lighten-4'; \r\n      break; \r\n    case 'Psy': \r\n      color = 'deep-purple darken-2'; \r\n      break; \r\n    case 'Electrik': \r\n      color = 'lime accent-1'; \r\n      break; \r\n    case 'Combat': \r\n      color = 'deep-orange'; \r\n      break; \r\n    default: \r\n      color = 'grey'; \r\n      break; \r\n  }\r\n \r\n  return `chip ${color}`;\r\n}\r\n*/\r\n    return(\r\n\r\n        /*\r\n            // Ce code affiche la liste des pokemons via leurs noms\r\n        <div>\r\n            Ce composant est chargé d'afficher le pokémon : {pokemon.name}\r\n        </div>\r\n\r\n        */\r\n\r\n        // 4) Le code suivant affiche les pokémons avec pour chaque grille de pokémon les informations nécessaires\r\n                    // 5) à la ligne où il y a card horizontal: on applique en JSX un style à notre balise. Pour cela on modifie la couleur de notre bordure nommée borderColor (à gauche) et on lui passe comme valeur la couleur qu'on a déterminé.\r\n                            //8) On créé après le paragraphe qui affiche le nom de pokemon, un autre paragraphe pour afficher la date selon la méthode qu'on a créé\r\n                                    //9) On ajoute d'abord les types d'un pokémon sous sa carte après le paragraphe de la date\r\n                                        // 14) On relie l'événement Click à notre gestionnaire d'événement goToPokemon et ainsi le click sur un pokemon déclenchera la navigation vers la fiche détaillée de ce pokémon \r\n        <div className=\"col s6 m4\" onClick={() => goToPokemon(pokemon.id)} onMouseEnter={showBorder} onMouseLeave={hideBorder}>\r\n      <div className=\"card horizontal\" style={{ borderColor: color }}>\r\n        <div className=\"card-image\"> \r\n          <img src={pokemon.picture} alt={pokemon.name}/>\r\n        </div>\r\n        <div className=\"card-stacked\">\r\n          <div className=\"card-content\">\r\n            <p>{pokemon.name}</p>\r\n            <p><small>{formatDate(pokemon.created)}</small></p>\r\n            {pokemon.types.map(type => (\r\n                <span key={type} className={formatType(type)}>{type}</span>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      </div> \r\n    </div>\r\n    );\r\n}\r\n\r\nexport default PokemonCard;","import Pokemon from './pokemon';\r\n   \r\nexport const POKEMONS: Pokemon[] = [\r\n {\r\n  id: 1,\r\n  name: \"Bulbizarre\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/001.png\",\r\n  types: [\"Plante\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 2,\r\n  name: \"Salamèche\",\r\n  hp: 28,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/004.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 3,\r\n  name: \"Carapuce\",\r\n  hp: 21,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/007.png\",\r\n  types: [\"Eau\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 4,\r\n  name: \"Aspicot\",\r\n  hp: 16,\r\n  cp: 2,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/013.png\",\r\n  types: [\"Insecte\", \"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 5,\r\n  name: \"Roucool\",\r\n  hp: 30,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/016.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 6,\r\n  name: \"Rattata\",\r\n  hp: 18,\r\n  cp: 6,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/019.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 7,\r\n  name: \"Piafabec\",\r\n  hp: 14,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/021.png\",\r\n  types: [\"Normal\", \"Vol\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 8,\r\n  name: \"Abo\",\r\n  hp: 16,\r\n  cp: 4,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/023.png\",\r\n  types: [\"Poison\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 9,\r\n  name: \"Pikachu\",\r\n  hp: 21,\r\n  cp: 7,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/025.png\",\r\n  types: [\"Electrik\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 10,\r\n  name: \"Sabelette\",\r\n  hp: 19,\r\n  cp: 3,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/027.png\",\r\n  types: [\"Normal\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 11,\r\n  name: \"Mélofée\",\r\n  hp: 25,\r\n  cp: 5,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/035.png\",\r\n  types: [\"Fée\"],\r\n  created: new Date()\r\n },\r\n {\r\n  id: 12,\r\n  name: \"Groupix\",\r\n  hp: 17,\r\n  cp: 8,\r\n  picture: \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/037.png\",\r\n  types: [\"Feu\"],\r\n  created: new Date()\r\n }\r\n];\r\n  \r\nexport default POKEMONS;","/* Version de PRODUCTION */\r\nimport Pokemon from \"../models/pokemon\";\r\nimport POKEMONS from \"../models/mock-pokemon\";\r\n  \r\nexport default class PokemonService {\r\n  \r\n  static pokemons:Pokemon[] = POKEMONS;\r\n  \r\n  static isDev = (!process.env.NODE_ENV || process.env.NODE_ENV === 'development');\r\n  \r\n  static getPokemons(): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      resolve(this.pokemons);\r\n    });\r\n  }\r\n  \r\n  static getPokemon(id: number): Promise<Pokemon|null> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${id}`)\r\n      .then(response => response.json())\r\n      .then(data => this.isEmpty(data) ? null : data)\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      resolve(this.pokemons.find(pokemon => id === pokemon.id));\r\n    }); \r\n  }\r\n  \r\n  static updatePokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'PUT',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {\r\n      const { id } = pokemon;\r\n      const index = this.pokemons.findIndex(pokemon => pokemon.id === id);\r\n      this.pokemons[index] = pokemon;\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static deletePokemon(pokemon: Pokemon): Promise<{}> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons/${pokemon.id}`, {\r\n        method: 'DELETE',\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const { id } = pokemon;\r\n      this.pokemons = this.pokemons.filter(pokemon => pokemon.id !== id);\r\n      resolve({});\r\n    }); \r\n  }\r\n  \r\n  static addPokemon(pokemon: Pokemon): Promise<Pokemon> {\r\n    pokemon.created = new Date(pokemon.created);\r\n  \r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons`, {\r\n        method: 'POST',\r\n        body: JSON.stringify(pokemon),\r\n        headers: { 'Content-Type': 'application/json'}\r\n      })\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      this.pokemons.push(pokemon);\r\n      resolve(pokemon);\r\n    }); \r\n  }\r\n  \r\n  static searchPokemon(term: string): Promise<Pokemon[]> {\r\n    if(this.isDev) {\r\n      return fetch(`http://localhost:3001/pokemons?q=${term}`)\r\n      .then(response => response.json())\r\n      .catch(error => this.handleError(error));\r\n    }\r\n  \r\n    return new Promise(resolve => {    \r\n      const results = this.pokemons.filter(pokemon => pokemon.name.includes(term));\r\n      resolve(results);\r\n    });\r\n  \r\n  }\r\n  \r\n  static isEmpty(data: Object): boolean {\r\n    return Object.keys(data).length === 0;\r\n  }\r\n  \r\n  static handleError(error: Error): void {\r\n    console.error(error);\r\n  }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport Pokemon from '../models/pokemon';\r\nimport PokemonService from '../services/pokemon-service';\r\n \r\nconst PokemonSearch: FunctionComponent = () => {\r\n  \r\n  const [term, setTerm] = useState<string>('');\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n \r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const term = e.target.value;\r\n    setTerm(term);\r\n \r\n    if(term.length <= 1) {\r\n      setPokemons([]);\r\n      return;\r\n    }\r\n \r\n    PokemonService.searchPokemon(term).then(pokemons => setPokemons(pokemons));\r\n  }\r\n  \r\n  return (\r\n    <div className=\"row\"> \r\n    <div className=\"col s12 m6 offset-m3\"> \r\n      <div className=\"card\"> \r\n      <div className=\"card-content\"> \r\n        <div className=\"input-field\"> \r\n        <input type=\"text\" placeholder=\"Rechercher un pokémon\" value={term} onChange={e => handleInputChange(e)} /> \r\n        </div> \r\n        <div className='collection'>\r\n        {pokemons.map((pokemon) => (\r\n          <Link key={pokemon.id} to={`/pokemons/${pokemon.id}`} className=\"collection-item\">\r\n            {pokemon.name}\r\n          </Link>\r\n        ))}\r\n        </div> \r\n      </div> \r\n      </div> \r\n    </div> \r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonSearch;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport Pokemon from '../models/pokemon';\r\n// import POKEMONS from '../models/mock-pokemon'; // 23) cet import a été supprimé suite à l'utilisation de pokemon-service\r\nimport PokemonCard from '../components/pokemon-card';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport { Link } from 'react-router-dom'; // 27) importation de Link puis ajout dans le DOM virtuel du bouton d'ajout\r\nimport PokemonSearch from '../components/pokemon-search';// importation du composant pokemon-search.tsx et intégration dans le DOM virtuel au dessus de la liste des pokemons\r\n  \r\nconst PokemonList: FunctionComponent = () => {\r\n  const [pokemons, setPokemons] = useState<Pokemon[]>([]);\r\n  \r\n// 22) à l'interieur du useEffect nous mettions en place la liste des pokémons avec la constante en dur POKEMONS. Ce code a été mis en commentaire puis nous avons démarré notre API Rest avec la méthode fetch\r\n     // 23) On supprime la méthode fetch (mis en commentaire) pour utiliser directement la classe pokemon-service après importation\r\n  useEffect(() => {\r\n    //setPokemons(POKEMONS);\r\n     \r\n    /*fetch('http://localhost:3001/pokemons')\r\n      .then(response => response.json())\r\n      .then((pokemons) => {\r\n        setPokemons(pokemons)\r\n      });*/\r\n\r\n    PokemonService.getPokemons().then(pokemons => setPokemons(pokemons));\r\n\r\n  }, []);\r\n  \r\n// 6) à la ligne où il y a PokemonCard key =... : Passage d'une prop supplémentaire à notre pokemonCard.\r\n  return (\r\n    <div>\r\n      <h1 className=\"center\">Pokédex</h1>\r\n      <div className=\"container\"> \r\n        <div className=\"row\">\r\n          <PokemonSearch  />\r\n        {pokemons.map(pokemon => (\r\n          <PokemonCard key={pokemon.id} pokemon={pokemon} />\r\n        ))}\r\n        </div>\r\n        <Link className=\"btn-floating btn-large waves-effect waves-light red z-depth-3\"\r\n          style={{position: 'fixed', bottom: '25px', right: '25px'}}\r\n          to=\"/pokemon/add\">\r\n          <i className=\"material-icons\">add</i>\r\n        </Link>\r\n      </div>\r\n    </div> \r\n  );\r\n}\r\n  \r\nexport default PokemonList;","import React, { FunctionComponent } from 'react';\r\n  \r\nconst Loader: FunctionComponent = () => {\r\n   \r\n  return (\r\n    <div className=\"preloader-wrapper big active\"> \r\n      <div className=\"spinner-layer spinner-blue\"> \r\n        <div className=\"circle-clipper left\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n        <div className=\"gap-patch\"> \r\n          <div className=\"circle\"></div> \r\n        </div><div className=\"circle-clipper right\"> \r\n          <div className=\"circle\"></div> \r\n        </div>\r\n      </div> \r\n   </div> \r\n  );\r\n}\r\n   \r\nexport default Loader;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps, Link } from 'react-router-dom'; \r\nimport Pokemon from '../models/pokemon';\r\n//import POKEMONS from '../models/mock-pokemon'; // 23) cet import a été supprimé suite à l'utilisation de pokemon-service\r\nimport formatDate from '../helpers/format-date';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader'; // 31) Importation du composant puis utilisation de l'icone de chargement en bas du DOM virturel (à la place de \"Aucun pokémon à afficher!\")\r\n  \r\ntype Params = { id: string };\r\n  \r\nconst PokemonsDetail: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n \r\n  // 22) suite) à l'interieur du useEffect nous utilision la constante en dur POKEMONS. Ce code a été mis en commentaire puis nous écrit une requête permettant de récupérer les données d'un seul pokémon\r\n        // 23) On supprime la méthode fetch (mis en commentaire) pour utiliser directement la classe pokemon-service après importation\r\n\r\n  useEffect(() => {\r\n   /* POKEMONS.forEach(pokemon => {\r\n      if (match.params.id === pokemon.id.toString()) {\r\n        setPokemon(pokemon);\r\n      }\r\n    })*/\r\n\r\n    /*fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n    .then(response => response.json())\r\n    .then(pokemon => {\r\n      if(pokemon.id) setPokemon(pokemon);\r\n    });*/\r\n\r\n    PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon)); // le caractère + permet de convertir une chaîne de caract en un nombre\r\n\r\n\r\n  }, [match.params.id]);\r\n    // ajout du bouton d'édition de formulaire à la ligne après l'image du pokemon (L31 à L33)\r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n          <div className=\"col s12 m8 offset-m2\"> \r\n            <h2 className=\"header center\">{ pokemon.name }</h2>\r\n            <div className=\"card hoverable\"> \r\n              <div className=\"card-image\">\r\n                <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n                <Link to={`/pokemons/edit/${pokemon.id}`} className=\"btn btn-floating halfway-fab waves-effect waves-light\">\r\n                  <i className=\"material-icons\">edit</i>\r\n                </Link>\r\n              </div>\r\n              <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                  <table className=\"bordered striped\">\r\n                    <tbody>\r\n                      <tr> \r\n                        <td>Nom</td> \r\n                        <td><strong>{ pokemon.name }</strong></td> \r\n                      </tr>\r\n                      <tr> \r\n                        <td>Points de vie</td> \r\n                        <td><strong>{ pokemon.hp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Dégâts</td> \r\n                        <td><strong>{ pokemon.cp }</strong></td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Types</td> \r\n                        <td>\r\n                          {pokemon.types.map(type => (\r\n                           <span key={type} className={formatType(type)}>{type}</span>\r\n                          ))}</td> \r\n                      </tr> \r\n                      <tr> \r\n                        <td>Date de création</td> \r\n                        <td>{formatDate(pokemon.created)}</td> \r\n                      </tr>\r\n                    </tbody>\r\n                  </table>\r\n                </div>\r\n                <div className=\"card-action\">\r\n                  <Link to=\"/\">Retour</Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonsDetail;","import React, { FunctionComponent } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n  \r\nconst PageNotFound: FunctionComponent = () => {\r\n  \r\n  return (\r\n    <div className=\"center\">\r\n      <img src=\"http://assets.pokemon.com/assets/cms2/img/pokedex/full/035.png\" alt=\"Page non trouvée\"/>\r\n      <h1>Hey, cette page n'existe pas !</h1> \r\n      <Link to=\"/\" className=\"waves-effect waves-teal btn-flat\">\r\n        Retourner à l'accueil\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PageNotFound;","import React, { FunctionComponent, useState } from 'react'; // 17) importation du useState pour notre formulaire\r\nimport { useHistory } from 'react-router-dom'; // 19) importation du hook useHistory pour la redirection en cas de soumission du formulaire\r\nimport Pokemon from '../models/pokemon';\r\nimport formatType from '../helpers/format-type';\r\nimport PokemonService from '../services/pokemon-service';\r\n\r\n  \r\n// 29) Déclaration de la prop isEditForm créée à la question 28) \r\ntype Props = {\r\n  pokemon: Pokemon,\r\n  isEditForm: boolean\r\n};\r\n\r\n// 17) suite) Déclaration de deux nouveaux types pour permettre de modeliser notre formulaire\r\ntype Field = {\r\n    value?: any,\r\n    error?: string,\r\n    isValid?: boolean\r\n}\r\n\r\n// 30) Ajout du champ picture\r\ntype Form = {\r\n    picture: Field,\r\n    name: Field,\r\n    hp: Field,\r\n    cp: Field,\r\n    types: Field\r\n}\r\n  \r\n// 29) suite) Réception de la propriété isEditForm créée à la question 28) \r\nconst PokemonForm: FunctionComponent<Props> = ({pokemon, isEditForm}) => {\r\n\r\n    // 17) On déclare le state qui représente les champs et les données de notre formulaire (par défaut on initialise la valeur de chaque champ avec les données initiales du pokémon reçu en entrée c'est à dire en tant que prop)\r\n            // 17) On pousse ensuite les valeurs dans le return en ajoutant les value\r\n\r\n//console.log(\"hello je suis la dans le component -----------\")\r\n//console.log(pokemon.picture)\r\n   // 19) après importation du hook useHistory, on le récupère dans une constante puis on ajoute la méthode HandleSubmit pour gérer la soumission du formulaire\r\n    const history = useHistory();\r\n\r\n    // 30) suite) Ajout du champ picture\r\n    const [form, setForm] = useState<Form>({\r\n        picture: { value: pokemon.picture },\r\n        name: {value: pokemon.name, isValid: true},\r\n        hp: {value: pokemon.hp, isValid: true},\r\n        cp: {value: pokemon.cp, isValid: true},\r\n        types: {value: pokemon.types, isValid: true},\r\n    });\r\n\r\n\r\n  const types: string[] = [\r\n    'Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik',\r\n    'Poison', 'Fée', 'Vol', 'Combat', 'Psy'\r\n  ];\r\n\r\n  // 17 ) On crée une méthode pour gérer la valeur par défaut des checkbox. (Ensuite on l'applique dans le DOM virtuel dans value et checked au même niveau que pour les autres données de la question 17) dans le return)\r\n  const hasType = (type: string): boolean => {\r\n    return form.types.value.includes(type);\r\n  }\r\n   \r\n\r\n  // 18) suite) On crée une nouvelle méthode selectType qui prend en charge la le champ des types pour qu'on puisse récupérer les types cochés dans le state\r\n  const selectType = (type: string, e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const checked = e.target.checked;\r\n    let newField: Field;\r\n\r\n    if(checked) {\r\n      // Si l'utilisateur coche un type, on l'ajoute à la liste des types du pokémon.\r\n      const newTypes: string[] = form.types.value.concat([type]);\r\n      newField = { value: newTypes };\r\n    }else {\r\n      // Si l'utilisateur décoche un type, on le retire de la liste des types du pokémon.\r\n      const newTypes: string[] = form.types.value.filter((currentType: string) => currentType !== type);\r\n      newField = { value: newTypes };\r\n    }\r\n\r\n    setForm({...form, ...{types: newField }});\r\n  }\r\n\r\n\r\n  // 18) On crée une nouvelle méthode  qui permettra de prendre en compte dans le state les modifications de notre formulaire\r\n        // 18) On applique ensuite les changements dans les propriétés du DOM virtuel. Plus précisément n ajoute l'attribut name=\"name\" aux inputs dans les parties pokemon name pokemon hp et pokemon cp puis sur la même ligne on ajoute l'événement onChange\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n     const fieldName: string = e.target.name;\r\n     const fieldValue: string = e.target.value;\r\n     const newField: Field = {[fieldName]: { value: fieldValue }};\r\n\r\n    setForm({...form, ...newField});\r\n  }\r\n\r\n   // 30) suite) Ajout d'une condition pour le champ picture uniquement dans le cadre d'un ajout (et non d'une édition). Voir ensuite la règle de validation dans Validator url\r\n   const isAddForm = () => {\r\n    return !isEditForm;\r\n  }\r\n\r\n\r\n  // 20) On crée une méthode ValidateForm qui vérifie le respect de chaque champ du formulaire\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n  // Validator url\r\n    if(isAddForm()) {\r\n      const start = \"https://assets.pokemon.com/assets/cms2/img/pokedex/detail/\";\r\n      const end = \".png\";\r\n\r\n      if(!form.picture.value.startsWith(start) || !form.picture.value.endsWith(end)) {\r\n        const errorMsg: string = \"L\\'url n\\'est pas valide.\";\r\n        const newField: Field = { value: form.picture.value, error: errorMsg, isValid: false };\r\n        newForm = { ...newForm, ...{ picture: newField } };\r\n      } else {\r\n        const newField: Field = { value: form.picture.value, error: '', isValid: true };\r\n        newForm = { ...newForm, ...{ picture: newField } };\r\n      }\r\n    }\r\n \r\n \r\n\r\n  // Validator name\r\n    if(!/^[a-zA-Zàéè ]{3,25}$/.test(form.name.value)) {\r\n      const errorMsg: string = 'Le nom du pokémon est requis (1-25).';\r\n      const newField: Field = { value: form.name.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.name.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ name: newField } };\r\n    }\r\n\r\n    // Validator hp\r\n    if(!/^[0-9]{1,3}$/.test(form.hp.value)) {\r\n      const errorMsg: string = 'Les points de vie du pokémon sont compris entre 0 et 999.';\r\n      const newField: Field = {value: form.hp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.hp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ hp: newField } };\r\n    }\r\n\r\n    // Validator cp\r\n    if(!/^[0-9]{1,2}$/.test(form.cp.value)) {\r\n      const errorMsg: string = 'Les dégâts du pokémon sont compris entre 0 et 99';\r\n      const newField: Field = {value: form.cp.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.cp.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ cp: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n    return newForm.name.isValid && newForm.hp.isValid && newForm.cp.isValid;\r\n  }\r\n\r\n  // 20) suite) On crée une méthode isTypesValide qui vérifie le respect du champ des types du formulaire\r\n  const isTypesValid = (type: string): boolean => {\r\n    // Cas n°1: Le pokémon a un seul type, qui correspond au type passé en paramètre.\r\n    // Dans ce cas on revoie false, car l'utilisateur ne doit pas pouvoir décoché ce type (sinon le pokémon aurait 0 type, ce qui est interdit)\r\n    if (form.types.value.length === 1 && hasType(type)) {\r\n      return false;\r\n    }\r\n    \r\n    // Cas n°2: Le pokémon a au moins 3 types.\r\n    // Dans ce cas il faut empêcher à l'utilisateur de cocher un nouveau type, mais pas de décocher les types existants.\r\n    if (form.types.value.length >= 3 && !hasType(type)) { \r\n      return false; \r\n    } \r\n    \r\n    // Après avoir passé les deux tests ci-dessus, on renvoie 'true', \r\n    // c'est-à-dire que l'on autorise l'utilisateur à cocher ou décocher un nouveau type.\r\n    return true;\r\n  }\r\n\r\n  // 19) après importation du hook useHistory, on le récupère dans une constante, puis on déclare la méthode HandleSubmit pour gérer le comportement de soumission du formulaire. On lie l'événement onSubmit du formulaire à notre méthode de gestionnaire d'événement du formulaire HandleSubmit à la première ligne du return dans l'élément form\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault(); // on bloque le comportement natif afin de gérer nous-même la soumission du formulaire\r\n    // console.log(form); // on affiche les données du state du formulaire dans la console du navigateur\r\n    const isFormValid = validateForm();   // 20) suite) (on met la ligne au dessus en commentaire car ici on n'en a pas besoin) On récupère le résultat de la validation de nos champs\r\n    \r\n    // 20) suite) On effectue le redirection vers la page de détail d'un pokémon seulement si le formulaire est valide\r\n      // 24) Avant la redirection, on récupère les dernières données du formulaire depuis le state puis on les pousse dans l'API Rest\r\n    if(isFormValid) {\r\n      pokemon.picture = form.picture.value; // On ajoute la champ de l'image pour récupèrer les modifications effectuées sur ce champ\r\n      pokemon.name = form.name.value; // 24) On récupère le nom depuis le state\r\n      pokemon.hp = form.hp.value;\r\n      pokemon.cp = form.cp.value;\r\n      pokemon.types = form.types.value;\r\n      //history.push(`/pokemons/${pokemon.id}`); // on redirige l'utilisateur vers la page de détail d'un pokémon\r\n     // PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`)); // On pousse les données avec updatePokemon puis on redirige avec le hook useHistory // mis en commentaire car on l'applique dans la constante updatePokemon question 31)\r\n\r\n      isEditForm ? updatePokemon() : addPokemon(); // Selon le choix on appelle soit update soit add\r\n\r\n      \r\n    }\r\n  }\r\n\r\n  // 31) Déxlaration de addPokemon pour l'ajout; et de updatePokemon pour l'édition\r\n    const addPokemon = () => {\r\n      PokemonService.addPokemon(pokemon).then(() => history.push(`/pokemons`));\r\n    }\r\n\r\n    const updatePokemon = () => {\r\n      PokemonService.updatePokemon(pokemon).then(() => history.push(`/pokemons/${pokemon.id}`)); // On pousse les données avec updatePokemon puis on redirige avec le hook useHistory\r\n    }\r\n\r\n  // 25) On implémente la méthode deletePokemon permettant de supprimer un pokémon. Ensuite; dans le DOM virtuel, on ajoute l'icone de suppression d'un pokémon juste en dessous de (la ligne de) l'image du pokemon\r\n  const deletePokemon = () => {\r\n    PokemonService.deletePokemon(pokemon).then(() => history.push(`/pokemons`));\r\n  }\r\n\r\n  // 21) On affiche (voir après les inputs des champs dans le DOM virtuel) des messages d'erreurs si les champs ne sont pas bien renseignés\r\n\r\n  // 30) suite) on affiche l'image du pokémon uniquement dans le cas d'une édition (à la ligne où on ajoute isEditForm && ce qu'il y avait avant)\r\n     // 30) suite) on ajoute le champ de l'image du pokémon uniquement dans le cas d'un ajout (/* Pokemon picture */)\r\n  return (\r\n    <form onSubmit={e => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            {isEditForm && ( \r\n            <div className=\"card-image\">\r\n              <img src={pokemon.picture} alt={pokemon.name} style={{width: '250px', margin: '0 auto'}}/>\r\n              <span className=\"btn-floating halfway-fab waves-effect waves-light\">\r\n                <i onClick={deletePokemon} className=\"material-icons\">delete</i>\r\n              </span>\r\n            </div>\r\n            )}          \r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Pokemon picture */}\r\n                {isAddForm() && ( \r\n                  <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Image</label>\r\n                  <input id=\"picture\" name=\"picture\" type=\"text\" className=\"form-control\" value={form.picture.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.picture.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.picture.error} \r\n                  </div>} \r\n                </div>\r\n                )}               \r\n                {/* Pokemon name */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Nom</label>\r\n                  <input id=\"name\" name=\"name\" type=\"text\" className=\"form-control\" value={form.name.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.name.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.name.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Pokemon hp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"hp\">Point de vie</label>\r\n                  <input id=\"hp\" name=\"hp\" type=\"number\" className=\"form-control\" value={form.hp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.hp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.hp.error}\r\n                  </div>}\r\n                </div>\r\n                {/* Pokemon cp */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"cp\">Dégâts</label>\r\n                  <input id=\"cp\" name=\"cp\" type=\"number\" className=\"form-control\" value={form.cp.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.cp.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.cp.error}\r\n                  </div>}\r\n                </div>\r\n                {/* Pokemon types */}\r\n                <div className=\"form-group\">\r\n                  <label>Types</label>\r\n                  {types.map(type => (\r\n                    <div key={type} style={{marginBottom: '10px'}}>\r\n                      <label>\r\n                        <input id={type} type=\"checkbox\" className=\"filled-in\" value={type} disabled={!isTypesValid(type)} checked={hasType(type)} onChange={e => selectType(type, e)}></input>\r\n                        <span>\r\n                          <p className={formatType(type)}>{ type }</p>\r\n                        </span>\r\n                      </label>\r\n                    </div>\r\n                  ))}  \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n   \r\nexport default PokemonForm;","import React, { FunctionComponent, useState, useEffect } from 'react';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n//import POKEMONS from '../models/mock-pokemon'; // 23) cet import a été supprimé suite à l'utilisation de pokemon-service\r\nimport PokemonService from '../services/pokemon-service';\r\nimport Loader from '../components/loader'; // 31) Importation du composant puis utilisation de l'icone de chargement en bas du DOM virturel (à la place de \"Aucun pokémon à afficher!\")\r\n \r\ntype Params = { id: string };\r\n  \r\nconst PokemonEdit: FunctionComponent<RouteComponentProps<Params>> = ({ match }) => {\r\n    \r\n  const [pokemon, setPokemon] = useState<Pokemon|null>(null);\r\n  \r\n  // 22) suite) à l'interieur du useEffect nous utilision la constante en dur POKEMONS. Ce code a été mis en commentaire puis nous écrit une requête permettant d'éditer les données d'un seul pokémon\r\n      // 23) On supprime la méthode fetch (mis en commentaire) pour utiliser directement la classe pokemon-service après importation\r\n\r\n  useEffect(() => {\r\n   /* POKEMONS.forEach(pokemon => {\r\n      if (match.params.id === pokemon.id.toString()) {\r\n        setPokemon(pokemon);\r\n      }\r\n    })*/\r\n    \r\n    /*fetch(`http://localhost:3001/pokemons/${match.params.id}`)\r\n    .then(response => response.json())\r\n    .then(pokemon => {\r\n      if(pokemon.id) setPokemon(pokemon);  \r\n     });*/\r\n\r\n     PokemonService.getPokemon(+match.params.id).then(pokemon => setPokemon(pokemon)); // le caractère + permet de convertir une chaîne de caract en un nombre\r\n     \r\n\r\n  }, [match.params.id]);\r\n  \r\n  // 28) Ajout d'une prop \"isEditForm\" mise à true à la ligne où il y a PokemonForm pour distinguer l'édition. Ajout dans le composant pokemon-add.tsx de la prop isEditForm à false pour distinguer l'ajout\r\n  return (\r\n    <div>\r\n      { pokemon ? (\r\n        <div className=\"row\">\r\n            <h2 className=\"header center\">Éditer { pokemon.name }</h2>\r\n            <PokemonForm pokemon={pokemon} isEditForm={true}></PokemonForm>\r\n        </div>\r\n      ) : (\r\n        <h4 className=\"center\"><Loader/></h4>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n  \r\nexport default PokemonEdit;","export default class Pokemon {\r\n // 1. Typage des propiétés d'un pokémon.\r\n id: number;\r\n hp: number;\r\n cp: number;\r\n name: string;\r\n picture: string;\r\n types: Array<string>;\r\n created: Date;\r\n  \r\n // 2. Définition des valeurs par défaut des propriétés d'un pokémon.\r\n constructor(\r\n  id: number,\r\n  hp: number = 100,\r\n  cp: number = 10,\r\n  name: string = '...',\r\n  picture: string = 'https://assets.pokemon.com/assets/cms2/img/pokedex/detail/XXX.png',\r\n  types: Array<string> = ['Normal'],\r\n  created: Date = new Date()\r\n ) {\r\n  // 3. Initialisation des propiétés d'un pokémons.\r\n  this.id = id;\r\n  this.hp = hp;\r\n  this.cp = cp;\r\n  this.name = name;\r\n  this.picture = picture;\r\n  this.types = types;\r\n  this.created = created;\r\n }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport PokemonForm from '../components/pokemon-form';\r\nimport Pokemon from '../models/pokemon';\r\n\r\nconst PokemonAdd: FunctionComponent = () => {\r\n    const [id] = useState<number>(new Date().getTime()); // On génére un identifiant unique pour notre futur pokémon. Pour cela la méthode getTime qui est native en javascript renvoit le nombre de milliseconds écoulés depuis le 1er janvier 1970 (on parle d'un Timestamp en informatique)\r\n    const [pokemon] = useState<Pokemon>(new Pokemon(id)); // On crée un nouveau pokémon vierge en lui passant cet identifiant\r\n\r\n    // à la ligne où il y a PokemonForm On met en place notre nouveau formulaire d'édition pour le moment avec un nouveau pokemon vierge et on laisse à l'utilisateur le soin de renseigner les infos pour ce nouveau pokemon\r\n    \r\n     // 28) Ajout d'une prop \"isEditForm\" mise à false à la ligne où il y a PokemonForm pour distinguer l'ajout. Ajout dans le composant pokemon-edit.tsx de la prop isEditForm à true pour distinguer l'édition\r\n    return (\r\n      <div className=\"row\">\r\n        <h2 className=\"header center\">Ajouter un pokémon</h2>\r\n        <PokemonForm pokemon={pokemon} isEditForm={false}></PokemonForm>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default PokemonAdd;","export default class AuthenticationService {\r\n    static isAuthenticated: boolean = false;\r\n\r\n    static login(username: string, password: string): Promise<boolean> {\r\n        const isAuthenticated = (username === 'pikachu' && password === 'pikachu');\r\n\r\n        return new Promise(resolve => {\r\n            setTimeout(() => {\r\n                this.isAuthenticated = isAuthenticated;\r\n                resolve(isAuthenticated);\r\n            }, 1000);\r\n        });\r\n    }\r\n}","import React, { FunctionComponent, useState } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport AuthenticationService from '../services/authentication-service';\r\n\r\ntype Field = {\r\n  value?: any,\r\n  error?: string,\r\n  isValid?: boolean\r\n};\r\n\r\ntype Form = {\r\n  username: Field,\r\n  password: Field\r\n}\r\n\r\nconst Login: FunctionComponent = () => {\r\n\r\n  const history = useHistory();\r\n\r\n  const [form, setForm] = useState<Form>({\r\n    username: { value: '' },\r\n    password: { value: '' },\r\n  });\r\n\r\n  const [message, setMessage] = useState<string>('Vous êtes déconnecté. (pikachu / pikachu)');\r\n\r\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\r\n    const fieldName: string = e.target.name;\r\n    const fieldValue: string = e.target.value;\r\n    const newField: Field = { [fieldName]: { value: fieldValue } };\r\n\r\n    setForm({ ...form, ...newField});\r\n  }\r\n\r\n  const validateForm = () => {\r\n    let newForm: Form = form;\r\n\r\n    // Validator username\r\n    if(form.username.value.length < 3) {\r\n      const errorMsg: string = 'Votre prénom doit faire au moins 3 caractères de long.';\r\n      const newField: Field = { value: form.username.value, error: errorMsg, isValid: false };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.username.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ username: newField } };\r\n    }\r\n\r\n    // Validator password\r\n    if(form.password.value.length < 6) {\r\n      const errorMsg: string = 'Votre mot de passe doit faire au moins 6 caractères de long.';\r\n      const newField: Field = {value: form.password.value, error: errorMsg, isValid: false};\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    } else {\r\n      const newField: Field = { value: form.password.value, error: '', isValid: true };\r\n      newForm = { ...newForm, ...{ password: newField } };\r\n    }\r\n\r\n    setForm(newForm);\r\n\r\n    return newForm.username.isValid && newForm.password.isValid;\r\n  }\r\n\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const isFormValid = validateForm();\r\n    if(isFormValid) {\r\n      setMessage('👉 Tentative de connexion en cours ...');\r\n      AuthenticationService.login(form.username.value, form.password.value).then(isAuthenticated => {\r\n        if(!isAuthenticated) {\r\n          setMessage('🔐 Identifiant ou mot de passe incorrect.');\r\n          return;\r\n        }\r\n        \r\n        history.push('/pokemons');\r\n        \r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={(e) => handleSubmit(e)}>\r\n      <div className=\"row\">\r\n        <div className=\"col s12 m8 offset-m2\">\r\n          <div className=\"card hoverable\">\r\n            <div className=\"card-stacked\">\r\n              <div className=\"card-content\">\r\n                {/* Form message */}\r\n                {message && <div className=\"form-group\">\r\n                  <div className=\"card-panel grey lighten-5\">\r\n                    {message}\r\n                  </div>\r\n                </div>}\r\n                {/* Field username */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"username\">Identifiant</label>\r\n                  <input id=\"username\" type=\"text\" name=\"username\" className=\"form-control\" value={form.username.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.username.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.username.error} \r\n                  </div>} \r\n                </div>\r\n                {/* Field password */}\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"password\">Mot de passe</label>\r\n                  <input id=\"password\" type=\"password\" name=\"password\" className=\"form-control\" value={form.password.value} onChange={e => handleInputChange(e)}></input>\r\n                  {/* error */}\r\n                  {form.password.error &&\r\n                  <div className=\"card-panel red accent-1\"> \r\n                   {form.password.error} \r\n                  </div>} \r\n                </div>\r\n              </div>\r\n              <div className=\"card-action center\">\r\n                {/* Submit button */}\r\n                <button type=\"submit\" className=\"btn\">Valider</button>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n \r\nexport default Login;","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport AuthenticationService from './services/authentication-service';\r\n  \r\nconst PrivateRoute = ({ component: Component, ...rest }: any) => (\r\n  <Route {...rest} render={(props) => {\r\n    const isAuthenticated = AuthenticationService.isAuthenticated;\r\n    if (!isAuthenticated) {    \r\n      return <Redirect to={{ pathname: '/login' }} />\r\n    }\r\n  \r\n    return <Component {...props} />\r\n  }} />\r\n);\r\n  \r\nexport default PrivateRoute;","import React, { FunctionComponent } from 'react';\r\n//import React, { FunctionComponent, useEffect, useState } from 'react';\r\n//import Pokemon from './models/pokemon';\r\n//import POKEMONS from './models/mock-pokemon';\r\nimport PokemonList from './pages/pokemon-list';\r\nimport PokemonDetail from './pages/pokemon-detail';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom'; // 14) importation à partir de la librairie 'react-router-dom'\r\n/*\r\nPour les importations de la question n° 14 (ligne ci-dessus) nous avons:\r\nL'élément Router permet de mettre en place notre système de navigation.\r\nL'élément Switch permet d'afficher le contenu d'une seule route à la fois'.\r\nL'élément Route permet de décrire chaque route de notre application.\r\n*/\r\nimport PageNotFound from './pages/page-not-found';// 15) importation de la page d'erreur\r\nimport PokemonEdit from './pages/pokemon-edit';// 16) importation du composant pokemon-edit.tsx puis déclaration (plus bas dans le switch) d'une nouvelle route pour cet édition de pokemon\r\n\r\nimport PokemonAdd from './pages/pokemon-add';// 26) importation du composant pokemon-add.tsx puis ajout d'une nouvelle route pour cet ajout de pokemon\r\nimport Login from './pages/login'; // 31) importation du composant login.tsx puis ajout de la route de la page de connexion\r\nimport PrivateRoute from './PrivateRoute'; // 32) importation du composant PrivateRoute.tsx puis adaptation dans Switch pour gèrer la page de connexion par rapport aux autres routes\r\n\r\n\r\nconst App: FunctionComponent = () => {\r\n// const name: String = 'React'; // code Hello World\r\n// const name: any = 'React';  // Code de Tra via \"any\"\r\n\r\n//const [name, setName] = useState<String>('React'); // Crochets pour le destructuring et String pour typer les données indiqué à notre state\r\n\r\n\r\n/* \r\n\r\nA faire 1 --> Créer un état pour gérer les pokémons:\r\n\r\n    (avant tout ne pas oublier l'étape d'importation --> cf ligne 2)\r\n    Définir une variable d'état nommé pokemons dans le composant App.tsx\r\n    Initialiser cet état avec la liste des pokemon contenus dans la constante pokemons\r\n    Typer l'état pokemons afin qu'il contienne un tableau de pokemon\r\n    enfin Afficher le nombre de pokémon présents dans notre state (dans l'état du composant) à l'utilisateur\r\n\r\n    c'est à dire que notre composant App.tsx ne doit plus afficher Hello React mais plutôt \"il y a 12 pokemons dans votre composant \"\r\n\r\n*/\r\n\r\n//const [pokemons] = useState<Pokemon[]>(POKEMONS); // correction 1\r\n\r\n/* \r\n\r\nA faire 2--> Ajouter un hook d'effet:\r\n\r\n    (avant tout ne pas oublier l'étape d'importation --> cf ligne 2)\r\n    Initialiser le state avec un tableau vide:[]\r\n    Charger la liste POKEMONS du composant à l'initialisation dans le state\r\n    Veiller à ce que la liste des pokémons ne soit chargée dans le state qu'une seule fois\r\n\r\n*/\r\n\r\n// Pour la partie 4: passer une prop depuis un composant: on n'a pas besoin de la correction 2 \r\n/*\r\nconst [pokemons, setPokemons] = useState<Pokemon[]>([]); // correction 2\r\n\r\nuseEffect(()=>{\r\n        setPokemons(POKEMONS);\r\n    },[]);\r\n\r\n*/\r\n return (\r\n\r\n //   <div> \r\n  //      <h1>Pokédex</h1>\r\n  //      <p>Il y a {pokemons.length} pokémons dans le Pokédex.</p>\r\n//   </div>\r\n   \r\n  //<h1>Hello World Test, {name} !</h1> // code Hello World\r\n\r\n/* \r\n\r\nA faire 3--> Afficher la liste des pokémons:\r\n\r\n    Pour cela nous devrons utiliser la méthode javascript \"map\"\r\n\r\n*/\r\n\r\n// correction 3\r\n/*\r\n<div>\r\n    <h1 className=\"center\">Pokédex</h1>\r\n    <div className=\"container\">\r\n      <div className=\"row\">    \r\n        {pokemons.map(({id, name, picture, created}) => (\r\n        <div className=\"col s6 m4\" key={id}>\r\n          <div className=\"card horizontal\">\r\n            <div className=\"card-image\">\r\n                <img src={picture} alt={name}/>  \r\n            </div>\r\n            <div className=\"card-stacked\">\r\n                <div className=\"card-content\">\r\n                    <p>{name}</p>\r\n                    <p><small>{created.toString()}</small></p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>  \r\n    ))}\r\n    </div>\r\n  </div>\r\n</div>\r\n  */\r\n\r\n// 14) On modifie le composant de la racine pour gérer les routes (on modifie le return et donc la partie 4 n'est plus prise en compte ici)\r\n\r\n/*\r\n// Partie 4: Passez une prop depuis le composant\r\n\r\n<PokemonList />\r\n*/\r\n\r\n<Router>\r\n  <div>\r\n    {/* La barre de navigation commune à toutes les pages */}\r\n    <nav>\r\n      <div className=\"nav-wrapper teal\">\r\n        <Link to=\"/\" className=\"brand-logo center\">Pokédex</Link>\r\n      </div>\r\n    </nav>\r\n    {/* Le système de gestion des routes de notre navigation */}\r\n    <Switch>\r\n      <PrivateRoute exact path=\"/\" component={PokemonList} />\r\n      <Route exact path=\"/login\" component={Login} />\r\n      <PrivateRoute exact path=\"/pokemons\" component={PokemonList} />\r\n      <PrivateRoute exact path=\"/pokemon/add\" component={PokemonAdd}/>\r\n      <PrivateRoute exact path=\"/pokemons/edit/:id\" component={PokemonEdit} />\r\n      <PrivateRoute path=\"/pokemons/:id\" component={PokemonDetail} />\r\n      <Route component={PageNotFound} />\r\n    </Switch>\r\n  </div>\r\n</Router>\r\n\r\n ) \r\n}\r\n  \r\nexport default App;\r\n\r\n/*\r\n// Composant  de Classe\r\nimport React from 'react';\r\n\r\nexport default class App extends React.Component{\r\n    const name: string = \"React\";\r\n\r\n    render(){\r\n        return <h1>Hello, {name}</h1>;\r\n    }\r\n}\r\n*/\r\n\r\n\r\n\r\n","import React from 'react';  \r\nimport ReactDOM from 'react-dom'; \r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}